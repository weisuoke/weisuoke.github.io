(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{309:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"immutable-js的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutable-js的原理","aria-hidden":"true"}},[t._v("#")]),t._v(" Immutable.js的原理")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5b9b30a35188255c6418e67c",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_1-简单的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单的例子","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 简单的例子")]),t._v(" "),a("p",[t._v("在深入研究前，我们先看个简单的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Immutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  map1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("复制代码\n")])])]),a("p",[t._v("这段代码先后往map里写入了800对随机生成的key和value。我们先看一下控制台的输出结果，对它的数据结构有个大致的认知（粗略扫一眼就行了）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e732bfa1d",alt:"img"}}),t._v("\n可以看到这是一个树的结构，子节点以数组的形式放在"),a("code",[t._v("nodes")]),t._v("属性里，"),a("code",[t._v("nodes")]),t._v("的最大长度似乎是 32 个。了解过 bitmap 的人可能已经猜到了这里"),a("code",[t._v("bitmap")]),t._v("属性是做什么的，它涉及到对树宽度的压缩，这些后面会说。")]),t._v(" "),a("p",[t._v("其中一个节点层层展开后长这样：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e67a54c23",alt:"img"}})]),t._v(" "),a("p",[t._v("这个"),a("code",[t._v("ValueNode")]),t._v("存的就是一组值了，"),a("code",[t._v("entry[0]")]),t._v("是key，"),a("code",[t._v("entry[1]")]),t._v("是value。目前大致看个形状就行了，下面我们会由浅入深逐步揭开它的面纱。（第二篇文章里会对图中所有属性进行解释）")]),t._v(" "),a("h2",{attrs:{id:"_2-基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 基本原理")]),t._v(" "),a("p",[t._v("我们先看下维基对于"),a("code",[t._v("持久化数据结构")]),t._v("的定义：")]),t._v(" "),a("blockquote",[a("p",[t._v("In computing, a persistent data structure is a data structure that always preserves the previous version of itself when it is modified.")])]),t._v(" "),a("p",[t._v("通俗点解释就是，对于一个"),a("code",[t._v("持久化数据结构")]),t._v("，每次修改后我们都会得到一个新的版本，且旧版本可以完好保留。")]),t._v(" "),a("p",[t._v("Immutable.js 用树实现了"),a("code",[t._v("持久化数据结构")]),t._v("，先看下图这颗树：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e67c6de9f",alt:"img"}}),t._v("\n假如我们要在"),a("code",[t._v("g")]),t._v("下面插入一个节点"),a("code",[t._v("h")]),t._v("，如何在插入后让原有的树保持不变？最简单的方法当然是重新生成一颗树：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e5d7eedd0",alt:"img"}}),t._v("\n但这样做显然是很低效的，每次操作都需要生成一颗全新的树，既费时又费空间，因而有了如下的优化方案：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e63391b4c",alt:"img"}}),t._v("\n我们新生成一个根节点，对于有修改的部分，把相应路径上的所有节点重新生成，对于本次操作没有修改的部分，我们可以直接把相应的旧的节点拷贝过去，这其实就是"),a("code",[t._v("结构共享")]),t._v("。这样每次操作同样会获得一个全新的版本（根节点变了，新的"),a("code",[t._v("a")]),t._v("!==旧的"),a("code",[t._v("a")]),t._v("），历史版本可以完好保留，同时也节约了空间和时间。")]),t._v(" "),a("p",[t._v("至此我们发现，用树实现"),a("code",[t._v("持久化数据结构")]),t._v("还是比较简单的，Immutable.js提供了多种数据结构，比如回到开头的例子，一个map如何成为"),a("code",[t._v("持久化数据结构")]),t._v("呢？")]),t._v(" "),a("h2",{attrs:{id:"_3-vector-trie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-vector-trie","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Vector Trie")]),t._v(" "),a("p",[t._v("实际上对于一个map，我们完全可以把它视为一颗扁平的树，与上文实现"),a("code",[t._v("持久化数据结构")]),t._v("的方式一样，每次操作后生成一个新的对象，把旧的值全都依次拷贝过去，对需要修改或添加的属性，则重新生成。这其实就是"),a("code",[t._v("Object.assign")]),t._v("，然而这样显然效率很低，有没有更好的方法呢？")]),t._v(" "),a("p",[t._v("在实现"),a("code",[t._v("持久化数据结构")]),t._v("时，Immutable.js 参考了"),a("code",[t._v("Vector Trie")]),t._v("这种数据结构（其实更准确的叫法是"),a("code",[t._v("persistent bit-partitioned vector trie")]),t._v("或"),a("code",[t._v("bitmapped vector trie")]),t._v("，这是Clojure里使用的一种数据结构，Immutable.js 里的相关实现与其很相似），我们先了解下它的基本结构。")]),t._v(" "),a("p",[t._v("假如我们有一个 map ，key 全都是数字（当然你也可以把它理解为数组）"),a("code",[t._v("{0: ‘banana’, 1: ‘grape’, 2: ‘lemon’, 3: ‘orange’, 4: ‘apple’}")]),t._v("，为了构造一棵二叉"),a("code",[t._v("Vector Trie")]),t._v("，我们可以先把所有的key转换为二进制的形式："),a("code",[t._v("{‘000’: ‘banana’, ‘001’: ‘grape’, ‘010’: ‘lemon’, ‘011’: ‘orange’, ‘100’: ‘apple’}")]),t._v("，然后如下图构建"),a("code",[t._v("Vector Trie")]),t._v("：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635e6d01c49d",alt:"img"}})]),t._v(" "),a("p",[t._v("可以看到，"),a("code",[t._v("Vector Trie")]),t._v("的每个节点是一个数组，数组里有"),a("code",[t._v("0")]),t._v("和"),a("code",[t._v("1")]),t._v("两个数，表示一个二进制数，所有值都存在叶子节点上，比如我们要找"),a("code",[t._v("001")]),t._v("的值时，只需顺着"),a("code",[t._v("0")]),t._v(" "),a("code",[t._v("0")]),t._v(" "),a("code",[t._v("1")]),t._v("找下来，即可得到"),a("code",[t._v("grape")]),t._v("。那么想实现"),a("code",[t._v("持久化数据结构")]),t._v("当然也不难了，比如我们想添加一个"),a("code",[t._v("5: ‘watermelon’")]),t._v("：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635ebb85e04d",alt:"img"}}),t._v("\n可见对于一个 key 全是数字的map，我们完全可以通过一颗"),a("code",[t._v("Vector Trie")]),t._v("来实现它，同时实现"),a("code",[t._v("持久化数据结构")]),t._v("。如果key不是数字怎么办呢？用一套映射机制把它转成数字就行了。 Immutable.js 实现了一个"),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fimmutable-js%2Fblob%2Fe65e5af806ea23a32ccf8f56c6fabf39605bac80%2Fsrc%2FHash.js%23L10%3A17",target:"_blank",rel:"noopener noreferrer"}},[t._v("hash"),a("OutboundLink")],1),t._v("函数，可以把一个值转换成相应数字。")]),t._v(" "),a("p",[t._v("这里为了简化，每个节点数组长度仅为2，这样在数据量大的时候，树会变得很深，查询会很耗时，所以可以扩大数组的长度，Immutable.js 选择了32。为什么不是31？40？其实数组长度必须是2的整数次幂，这里涉及到实现"),a("code",[t._v("Vector Trie")]),t._v("时的一个优化，接下来我们先研究下这点。")]),t._v(" "),a("p",[t._v("下面的部分内容对于不熟悉进制转换和位运算的人来说可能会相对复杂一些，不过只要认真思考还是能搞通的。")]),t._v(" "),a("h2",{attrs:{id:"_4-数字分区（digit-partitioning）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数字分区（digit-partitioning）","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 数字分区（Digit partitioning）")]),t._v(" "),a("p",[a("code",[t._v("数字分区")]),t._v("指我们把一个 key 作为数字对应到一棵前缀树上，正如上节所讲的那样。")]),t._v(" "),a("p",[t._v("假如我们有一个 key "),a("code",[t._v("9128")]),t._v("，以 7 为基数，即数组长度是 7，它在"),a("code",[t._v("Vector Trie")]),t._v("里是这么表示的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635eca568dee",alt:"img"}})]),t._v(" "),a("p",[t._v("需要5层数组，我们先找到"),a("code",[t._v("3")]),t._v("这个分支，再找到"),a("code",[t._v("5")]),t._v("，之后依次到"),a("code",[t._v("0")]),t._v("。为了依次得到这几个数字，我们可以预先把")]),t._v(" "),a("p",[a("code",[t._v("9128")]),t._v("转为7进制的"),a("code",[t._v("35420")]),t._v("，但其实没有这个必要，因为转为 7 进制形式的过程就是不断进行除法并取余得到每一位上的数，我们无须预先转换好，类似的操作可以在每一层上依次执行。")]),t._v(" "),a("p",[t._v("运用进制转换相关的知识，我们可以采用这个方法"),a("code",[t._v("key / radixlevel - 1 % radix")]),t._v("得到每一位的数（"),a("strong",[t._v("为了简便，本文除代码外所有/符号皆表示除法且向下取整")]),t._v("），其中"),a("code",[t._v("radix")]),t._v("是每层数组的长度，即转换成几进制，"),a("code",[t._v("level")]),t._v("是当前在第几层，即第几位数。比如这里"),a("code",[t._v("key")]),t._v("是"),a("code",[t._v("9128")]),t._v("，"),a("code",[t._v("radix")]),t._v("是"),a("code",[t._v("7")]),t._v("，一开始"),a("code",[t._v("level")]),t._v("是"),a("code",[t._v("5")]),t._v("，通过这个式子我们可以得到第一层的数"),a("code",[t._v("3")]),t._v("。")]),t._v(" "),a("p",[t._v("代码实现如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RADIX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// root是根节点，在别的地方定义了")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// depth是当前树的深度。这种计算方式跟上面列出的式子是等价的，但可以避免多次指数计算。这个size就是上面的radix^level - 1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RADIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RADIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RADIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RADIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-位分区（bit-partitioning）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-位分区（bit-partitioning）","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 位分区（Bit Partitioning）")]),t._v(" "),a("p",[t._v("显然，以上"),a("code",[t._v("数字分区")]),t._v("的方法是有点耗时的，在每一层我们都要进行两次除法一次取模，显然这样并不高效，"),a("code",[t._v("位分区")]),t._v("就是对其的一种优化。")]),t._v(" "),a("p",[a("code",[t._v("位分区")]),t._v("是建立在"),a("code",[t._v("数字分区")]),t._v("的基础上的，所有以2的整数次幂（2，4，8，16，32…）为基数的"),a("code",[t._v("数字分区")]),t._v("前缀树，都可以转为"),a("code",[t._v("位分区")]),t._v("。基于一些位运算相关的知识，我们就能避免一些耗时的计算。")]),t._v(" "),a("p",[a("code",[t._v("数字分区")]),t._v("把 key 拆分成一个个数字，而"),a("code",[t._v("位分区")]),t._v("把 key 分成一组组 bit。以一个 32 路的前缀树为例，"),a("code",[t._v("数字分区")]),t._v("的方法是把 key 以 32 为基数拆分（实际上就是 32 进制），而"),a("code",[t._v("位分区")]),t._v("是把它以 5 个 bits 拆分，因为32 = 25，那我们就可以把 32 进制数的每一位看做 5 个二进制位 。实际上就是把 32 进制数当成 2 进制进行操作，这样原本的很多计算就可以用更高效的位运算的方式代替。因为现在基数是 32，即"),a("code",[t._v("radix")]),t._v("为 32，所以前面的式子现在是"),a("code",[t._v("key / 32level - 1 % 32")]),t._v("，而既然"),a("code",[t._v("32 =``25")]),t._v("，那么该式子可以写成这样"),a("code",[t._v("key / 25 × (level - 1) % 25")]),t._v("。根据位运算相关的知识我们知道"),a("code",[t._v("a / 2n === a >>> n")]),t._v("、"),a("code",[t._v("a % 2n === a & (2n - 1)")]),t._v("。这样我们就能通过位运算得出该式子的值。")]),t._v(" "),a("p",[a("strong",[t._v("如果你对位运算不太熟悉的话，大可不看上面的式子，举个例子就好理解了")]),t._v("：比如数字"),a("code",[t._v("666666")]),t._v("的二进制形式是"),a("code",[t._v("10100 **01011** 00001 01010")]),t._v("，这是一个20位的二进制数。如果我们要得到第二层那五位数"),a("code",[t._v("01011")]),t._v("，我们可以先把它右移"),a("code",[t._v(">>>")]),t._v("(左侧补0)10位，得到"),a("code",[t._v("00000 00000 10100 **01011**")]),t._v("，再"),a("code",[t._v("&")]),t._v("一下"),a("code",[t._v("00000 00000 00000 11111")]),t._v("，就得到了"),a("code",[t._v("**01011**")]),t._v("。\n这样我们可以得到下面的代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WIDTH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 25 = 32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WIDTH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 31，即11111")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("复制代码\n")])])]),a("p",[t._v("这样我们每次查找的速度就会得到提升。可以看一张图进行理解，为了简化展示，假设我们用了一个4路前缀树，4 = 22，所以用两位二进制数分区。对于"),a("code",[t._v("626")]),t._v("，查找过程如下：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/14/165d635eed8fa23f",alt:"img"}}),t._v(" "),a("code",[t._v("626")]),t._v("的二进制形式是"),a("code",[t._v("10 01 11 00 10")]),t._v("，所以通过上面的位运算方法，我们便可以高效地依次得到"),a("code",[t._v("10")]),t._v("、"),a("code",[t._v("01")]),t._v("…")]),t._v(" "),a("h2",{attrs:{id:"_6-源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-源码","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. 源码")]),t._v(" "),a("p",[t._v("说了这么多，我们看一下 Immutable.js 的源码吧。我们主要看一下查找的部分就够了，这是"),a("code",[t._v("Vector Trie")]),t._v("的核心。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" notSetValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shift "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" keyHash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" shift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shift "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHIFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" notSetValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" notSetValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到， Immutable.js 也正是采用了位分区的方式，通过位运算得到当前数组的 index 选择相应分支。（到这里我也不由赞叹，短短10行代码包含了多少思想呀）")]),t._v(" "),a("p",[t._v("不过它的实现方式与上文所讲的有一点不同，上文中对于一个 key ，我们是“正序”存储的，比如上图那个"),a("code",[t._v("626")]),t._v("的例子，我们是从根节点往下依次按照"),a("code",[t._v("10 01 11 00 10")]),t._v("去存储，而 Immutable.js 里则是“倒序”，按照"),a("code",[t._v("10 00 11 01 10")]),t._v("存储。所以通过源码这段你会发现 Immutable.js 查找时先得到的是 key 末尾的 SHIFT 个 bit ，然后再得到它们之前的 SHIFT 个 bit ，依次往前下去，而前面我们的代码是先得到 key 开头的 SHIFT 个 bit，依次往后。")]),t._v(" "),a("p",[t._v("用这种方式的原因之一是key的大小（二进制长度）不固定。")]),t._v(" "),a("h2",{attrs:{id:"_7-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. 时间复杂度")]),t._v(" "),a("p",[t._v("因为采用了"),a("code",[t._v("结构共享")]),t._v("，在添加、修改、删除操作后，我们避免了将 map 中所有值拷贝一遍，所以特别是在数据量较大时，这些操作相比"),a("code",[t._v("Object.assign")]),t._v("有明显提升。")]),t._v(" "),a("p",[t._v("然而，查询速度似乎减慢了？我们知道 map 里根据 key 查找的速度是"),a("code",[t._v("O(1)")]),t._v("，这里由于变成了一棵树，查询的时间复杂度变成了"),a("code",[t._v("O(log N)")]),t._v("，因为是 32 叉树，所以准确说是"),a("code",[t._v("O(log32 N)")]),t._v("。")]),t._v(" "),a("p",[t._v("等等 32 叉树？这棵树可不是一般地宽啊，Javascript里对象可以拥有的key的最大数量一般不会超过"),a("code",[t._v("232")]),t._v("个（"),a("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Fwww.ecma-international.org%2Fecma-262%2F5.1%2F%23sec-15.4.2.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA-262第五版"),a("OutboundLink")],1),t._v("里定义了JS里由于数组的长度本身是一个 32 位数，所以数组长度不应大于 232 - 1 ，JS里对象的实现相对复杂，但大部分功能是建立在数组上的，所以在大部分场景下对象里 key 的数量不会超过 232 - 1。相关讨论见"),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F30194088%2Fdo-javascript-variables-have-a-storage-limit",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。而且假设我们有 232 个值、每个值是一个32bit的 Number ，只算这些值的话总大小也有17g了，前端一般是远不需要操作这个量级的数据的），这样就可以把查找的时间复杂度当做是“"),a("code",[t._v("O(log32 232)")]),t._v("”，差不多就是“"),a("code",[t._v("O(log 7)")]),t._v("”，所以我们可以认为在实际运用中，5bits (32路)的 Vector Trie 查询的时间复杂度是常数级的，32 叉树就是用了空间换时间。")]),t._v(" "),a("p",[t._v("空间…这个 32 叉树占用的空间也太大了吧？即便只有三层，我们也会有超过"),a("code",[t._v("32 × 32 × 32 = 32768")]),t._v("个节点。当然 Immutable.js 在具体实现时肯定不会傻乎乎的占用这么大空间，它对树的高度和宽度都做了“压缩”，此外，还对操作效率进行了其它一些优化。")]),t._v(" "),a("h2",{attrs:{id:"_8-hamt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-hamt","aria-hidden":"true"}},[t._v("#")]),t._v(" 8. HAMT")]),t._v(" "),a("p",[a("code",[t._v("HAMT")]),t._v("全称"),a("code",[t._v("hash array mapped trie")]),t._v("，其基本原理与上篇所说的"),a("code",[t._v("Vector Trie")]),t._v("非常相似，不过它会对树进行压缩，以节约一些空间。 Immutable.js 参考了"),a("code",[t._v("HAMT")]),t._v("对树进行了高度和节点内部的压缩。")]),t._v(" "),a("h2",{attrs:{id:"_9-树高压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-树高压缩","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. 树高压缩")]),t._v(" "),a("p",[t._v("假设我们有一个 2 叉 "),a("code",[t._v("Vector Trie")]),t._v("，现在存了一个值，key为"),a("code",[t._v("110")]),t._v("（二进制形式）， 它会被存到"),a("code",[t._v("0")]),t._v(" "),a("code",[t._v("1")]),t._v(" "),a("code",[t._v("1")]),t._v("这条路径下，如下图：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/21/165fb2b790ba65a2",alt:"img"}}),t._v("\n显然，这图里展示的结构已经进行了最简单的优化，因为现在只存了一个值，所以把与"),a("code",[t._v("110")]),t._v("无关的节点去掉了。还能进行什么优化吗？我们发现，中间那两个节点也是可以去掉的，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/trie2.png",alt:""}})]),t._v(" "),a("p",[t._v("获取该值时，我们先从"),a("code",[t._v("0")]),t._v("找下来，发现这直接是一个根节点，那取它存储的值就行了。就是说在不产生混淆的情况下，我们可以用尽可能少的二进制位去标识这个 key 。这样我们就进行了高度上的压缩，既减少了空间，又减少了查找和修改的时间。\n如果要添加一个值，它的 key 结尾也是"),a("code",[t._v("0")]),t._v("，该怎么做呢？很简单，如下图：\n"),a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/trie3.png",alt:"img"}}),t._v("\n我们只要在需要的时候增加或减少节点即可。")]),t._v(" "),a("h2",{attrs:{id:"_10-节点内部压缩-bitmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-节点内部压缩-bitmap","aria-hidden":"true"}},[t._v("#")]),t._v(" 10. 节点内部压缩-Bitmap")]),t._v(" "),a("p",[t._v("上一篇我们提到， Immutable.js 的 Trie 里，每个节点数组的长度是 32 ，然而在很多情况下，这 32 个位置大部分是用不到的，这么大的数组显然也占用了很大空间。使用"),a("code",[t._v("Bitmap")]),t._v("，我们就可以对数组进行压缩。\n我们先拿长度为 8 的数组举例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/bitmap1.png",alt:""}})]),t._v(" "),a("p",[t._v("我们实际上只是用了数组的下标对 key 进行索引，这样想数组第 5、6、7 位显然目前是毫无作用的，那 0、2、3 呢？我们有必要为了一个下标 4 去维持一个长度为5的数组吗？我们只需要指明“假想数组”中下标为 1 和为 4 的位置有数就可以了。这里就可以用到"),a("code",[t._v("bitmap")]),t._v("，如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/bitmap2.png",alt:""}})]),t._v(" "),a("p",[t._v("我们采用了一个数，以其二进制形式表达“假想的长度为8的数组”中的占位情况，1 表示数组里相应下标位置有值，0 则表示相应位置为空。比如这个二进制数第 4 位（从右往左，从 0 开始数）现在是 1 ，就表示数组下标为 4 的位置有值。这样原本的长度为 8 的数组就可以压缩到 2 。\n注意这个数组中的元素还是按照“假想数组”中的顺序排列的，这样我们若要取“假想数组”中下标为 i 的元素时，首先是判断该位置有没有值，若有，下一步就是得到在它之前有几个元素，即在二进制数里第 i 位之前有多少位为 1 ，假设数量为 a ，那么该元素在当前压缩后的数组里下标就是 a 。\n具体操作中，我们可以通过"),a("code",[t._v("bitmap & (1 << i - 1)")]),t._v("，得到一个二进制数，该二进制数中只有第 i 位之前有值的地方为 1 ，其余全为 0 ，下面我们只需统计该二进制数里 1 的数量即可得到下标。计算二进制数中 1 数量的过程被称作"),a("code",[t._v("popcount")]),t._v("，具体算法有很多，我了解不多就不展开了，前面点击后是维基的地址，感兴趣的可以研究下。\n下面我们看一下这部分的源码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" notSetValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shift "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" keyHash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyHash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" shift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bitmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bitmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bitmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" notSetValue\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("popCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bitmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        shift "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHIFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        notSetValue\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可见它与我们上一篇看到的源码并没有太大不同（Immutable.js 里如果一个数组占用不超过一半（ 16 个），就会对其进行压缩，上一篇的源码就是没有压缩下的情况），就是多了一个用 bitmap 计算数组下标的过程，方式也跟上文所讲的一样，对于这个"),a("code",[t._v("popCount")]),t._v("方法，我把源码也贴出来：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("popCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x55555555")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x33333333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x33333333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0f0f0f0f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x7f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_11-为什么是32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-为什么是32","aria-hidden":"true"}},[t._v("#")]),t._v(" 11. 为什么是32")]),t._v(" "),a("p",[t._v("上一篇我们提到了 Immutable.js 的 Vector Trie 采用了 32 作为数组的长度，也解释了由于采用了"),a("code",[t._v("位分区")]),t._v("，该数字只能是2的整数次幂，所以不能是 31、33 等。但8、16、64等等呢？这是通过实际测试得出的，见下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/time.png",alt:""}})]),t._v(" "),a("p",[t._v("图中分别是查找和更新的时间，看上去似乎 8 或 16 更好？考虑到平时的使用中，查找比更新频次高很多，所以 Immutable.js 选择了 32。")]),t._v(" "),a("h2",{attrs:{id:"_12-回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-回顾","aria-hidden":"true"}},[t._v("#")]),t._v(" 12. 回顾")]),t._v(" "),a("p",[t._v("现在，我们就能理解第一篇文章开头的截图了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/console%E6%88%AA%E5%9B%BE.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ygyooo.github.io/2018/09/19/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6immutable.js%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/console%E6%88%AA%E5%9B%BE2.png",alt:""}})]),t._v(" "),a("p",[t._v("我们可以看到， map 里主要有三种类型的节点：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HashArrayMapNode")]),t._v("，拥有的子节点数量 ＞16 ，拥有的数组长度为 32")]),t._v(" "),a("li",[a("code",[t._v("BitmapIndexedNode")]),t._v("，拥有的子节点数量 ≤16 ，拥有的数组长度与子节点数量一致，经由 bitmap 压缩")]),t._v(" "),a("li",[a("code",[t._v("ValueNode")]),t._v("，叶子节点，存储 key 和 value")])]),t._v(" "),a("p",[t._v("此外，每个节点似乎都有个"),a("code",[t._v("ownerID")]),t._v("属性，这又是做什么的呢？它涉及到 Immutable.js 中的可变数据结构。")]),t._v(" "),a("h2",{attrs:{id:"_13-transient"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-transient","aria-hidden":"true"}},[t._v("#")]),t._v(" 13. Transient")]),t._v(" "),a("p",[t._v("其实可以说 Immutable.js 中的数据结构有两种形态，“不可变”和“可变”。虽然“不可变”是 Immutable.js 的主要优势，但“可变”形态下的操作当然效率更高。有时对于某一系列操作，我们只需要得到这组操作结束后的状态，若中间的每一个操作都用不可变数据结构去实现显然有些多余。这种情景下，我们就可以使用"),a("code",[t._v("withMutations")]),t._v("方法对相应数据结构进行临时的“可变”操作，最后再返回一个不可变的结构，这就是"),a("code",[t._v("Transient")]),t._v("，比如这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Immutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMutations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启Transient")]),t._v("\n  m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们可以直接在m上进行修改，不需要 m = m.set('a', 1)")]),t._v("\n  m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Transient结束复制代码")]),t._v("\n")])])]),a("p",[t._v("实际上， Immutable.js 里很多方法都使用了"),a("code",[t._v("withMutations")]),t._v("构造临时的可变数据结构来提高效率，比如 Map 中的")]),t._v(" "),a("p",[a("code",[t._v("map")]),t._v(" "),a("code",[t._v("deleteAll")]),t._v("方法以及 Map 的构造函数。而在一个不可变数据结构中实现临时的可变数据结构的关键（有点拗口XD），就是这个"),a("code",[t._v("ownerID")]),t._v("。下图对比了使用与不使用"),a("code",[t._v("Transient")]),t._v("时的区别：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/21/165fb2b893298cde",alt:"img"}})]),t._v(" "),a("p",[t._v("显然，使用"),a("code",[t._v("Transient")]),t._v("后由于无需每次生成新的节点，效率会提高空间占用会减少。在开启"),a("code",[t._v("Transient")]),t._v("时，根节点会被赋与一个新的"),a("code",[t._v("ownerID")]),t._v("，在"),a("code",[t._v("Transient")]),t._v("完成前的每一步操作只需遵循下面的逻辑即可：")]),t._v(" "),a("ol",[a("li",[t._v("若要操作的节点的"),a("code",[t._v("ownerID")]),t._v("与父节点的不一致，则生成新的节点，把旧节点上的值拷贝过来，其"),a("code",[t._v("ownerID")]),t._v("更新为父节点的"),a("code",[t._v("ownerID")]),t._v("，然后进行相应操作；")]),t._v(" "),a("li",[t._v("若要操作的节点的"),a("code",[t._v("ownerID")]),t._v("与父节点的一致，则直接在该节点上操作；")])]),t._v(" "),a("p",[t._v("下面先我们看下 Immutable.js 中开启"),a("code",[t._v("Transient")]),t._v("的相关源码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OwnerID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asMutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ownerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__ensureOwner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OwnerID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMutations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mutable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asMutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wasAltered")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__ensureOwner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ownerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它给了根节点一个"),a("code",[t._v("ownerID")]),t._v("，这个"),a("code",[t._v("ownerID")]),t._v("会在接下来的操作中按照上面的逻辑使用。这段代码有个“骚操作”，就是用 JS 的对象地址去作为 ID ，因为每次 new 之后的对象的地址肯定与之前的对象不同，所以用这种方法可以很简便高效地构造一套 ID 体系。下面再看下开启后进行操作时的一段源码（ Map 中的"),a("code",[t._v("set")]),t._v("操作就会调用这个"),a("code",[t._v("update")]),t._v("方法）：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ownerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keyHash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" didChangeSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" didAlter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略前面的代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isEditable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ownerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ownerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ownerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newNodes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isEditable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isEditable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashArrayMapNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ownerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("与前面讲的逻辑一样，先比较该节点"),a("code",[t._v("ownerID")]),t._v("与传进来父节点的是否一致，然后直接在节点上操作或生成新的节点。")]),t._v(" "),a("h3",{attrs:{id:"_14-hash冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-hash冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 14. hash冲突")]),t._v(" "),a("p",[t._v("这块的内容就没什么新东西了，任何语言或库里对于 hashMap 的实现都需考虑到 hash 冲突的问题。我们主要看一下 Immutable.js 是怎么处理的。")]),t._v(" "),a("p",[t._v("要上一篇我们知道了，在往 Map 里存一对 key、value 时， Immutable.js 会先对 key 进行 hash ，根据 hash 后的值存到树的相应位置里。不同的 key 被 hash 后的结果是可能相同的，即便概率应当很小。\nhash 冲突是一个很基本的问题，解决方法有很多，这里最简单适用的方法就是把冲突的节点扩展成一个线性结构，即数组，数组里直接存一组组 key 和 value ，查找到此处时则遍历该数组找到匹配的 key 。虽然这里的时间复杂度会变成线性的，但考虑到发生 hash 冲突的概率很低，所以时间复杂度的增加可以忽略不计。\n我发现 Immutable.js 的 hash 函数对"),a("code",[t._v("abc")]),t._v("和"),a("code",[t._v("bCc")]),t._v("的 hash 结果都是 "),a("code",[t._v("96354")]),t._v("，在同一个 map 里用这两个 key 就会造成 hash 冲突，我们把这个 map log 出来如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/21/165fb2b89300d69c",alt:"img"}})]),t._v(" "),a("p",[t._v("Immutable.js 用了一个叫做"),a("code",[t._v("HashCollisionNode")]),t._v("的节点去处理发生冲突的键值，它们被放在"),a("code",[t._v("entries")]),t._v("数组里。\n大家也可以自己试试，代码如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Immutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 随便塞一点别的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bCc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])},[],!1,null,null,null);s.default=e.exports}}]);