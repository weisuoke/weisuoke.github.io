(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{242:function(_,v,a){"use strict";a.r(v);var t=a(2),r=Object(t.a)({},function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"book-前端架构：从入门到微前端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#book-前端架构：从入门到微前端","aria-hidden":"true"}},[_._v("#")]),_._v(" Book - 前端架构：从入门到微前端")]),_._v(" "),a("h2",{attrs:{id:"_1-前端架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前端架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1. 前端架构")]),_._v(" "),a("p",[_._v("架构也是分层级的，在不同的阶段里形式是不一样的，当面向不同的人群时，模式也是不一样的。所以每个人所理解的架构就会有所差异，那么到底什么是架构呢？")]),_._v(" "),a("h3",{attrs:{id:"_1-1-为什么需要软件架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-为什么需要软件架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.1 为什么需要软件架构")]),_._v(" "),a("h4",{attrs:{id:"_1-1-1-什么是软件架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-什么是软件架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.1.1 什么是软件架构")]),_._v(" "),a("p",[_._v("软件架构是指软件系统的高级结构，以及创建这种结构和系统的约束。每个结构包括软件元素、元素之间的关系，以及元素和关系的属性。软件系统的架构是一种隐喻，类似于建筑物的体系结构。它作为系统和开发项目的蓝图，列出了设计团队必须执行的任务。")]),_._v(" "),a("h4",{attrs:{id:"_1-1-2-开发人员需要怎样的软件架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-开发人员需要怎样的软件架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.1.2 开发人员需要怎样的软件架构")]),_._v(" "),a("p",[_._v("不以实现为目的的架构，都是无意义的。因此，我们对系统架构的基本判断如下：")]),_._v(" "),a("ul",[a("li",[_._v("一个无法上线的应用架构，算不上好的软件架构。")]),_._v(" "),a("li",[_._v("一个没有人能完成开发的软件架构，算不上具有可行性的软件架构。")]),_._v(" "),a("li",[_._v("一个在现有的技术上不可行的架构，算不上合理的软件架构。")])]),_._v(" "),a("p",[_._v("所以，一旦我们谈及软件架构，需要讨论的第一个重点便是因地制宜。在BAT这一量级的公司里，他们实施的架构往往无法在小公司里照搬。这一量级的组织拥有大量的资源、基础设施，与之相匹配的优秀人才。若想实施相似的架构，小公司所需要的则是在时间上的长时间投入，或者有强力的技术人员，才能驱使系统往这个方面靠拢。其所依靠的是循序渐进的方式，只有这样才能完成架构目标。")]),_._v(" "),a("p",[_._v("除此，谈及软件架构的时候，还得有这么一些人——他们能按时、高质量（或者说有质量）地完成系统的设计。只凭一系列软件的架构蓝图，没有对应的实施者、维护者，那么系统就可能不会以预计的方式来构建；只凭一系列的架构蓝图，没有相应的实施规范和原则，便无法按我们预期的方式来实施项目。")]),_._v(" "),a("ul",[a("li",[_._v("系统间关系。明确地指出该系统与其他系统之间的关系，是调用关系，还是依赖关系等。")]),_._v(" "),a("li",[_._v("系统内关系。系统内各子系统之间的关系，如前端应用与后端应用，以怎样的方式通信，需要怎样的通信机制。")]),_._v(" "),a("li",[_._v("应用内架构。包含应用相关的框架、组件，并清楚地表示出它们之间的关系。")]),_._v(" "),a("li",[_._v("规范和原则。用于指导项目中的开发人员，编写出符合需求的代码，以构建出设计中的架构。")])]),_._v(" "),a("p",[_._v("对于瀑布型项目而言，它还包含类级别的架构，即一个类应该提供怎样的接口，存在怎样的继承关系。而对于敏捷型项目而言，它们则会在进入项目后才完成。这部分的内容，偏向于系统的详细设计。同理于前端应用，我们决定开发、使用哪些UI组件，便属于系统的抽象架构部分。而关于这个组件提供的接口，则偏向于组件的详细设计，但是它也属于要考虑的架构范围——但并非是必须考虑的范围。")]),_._v(" "),a("h3",{attrs:{id:"_1-2-架构的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-架构的设计","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.2 架构的设计")]),_._v(" "),a("p",[_._v("架构设计并非只是一个技术工作，它包含了一系列复杂的工作，其范围包括软件工程、开发实践、业务交付等相关的领域。为此，在进行架构设计的时候，需要进行一系列技术及非技术相关的工作，如图1-1所示。")]),_._v(" "),a("p",[a("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801150489576.jpg",alt:"-w1318"}})]),_._v(" "),a("p",[_._v("相应的步骤如下：")]),_._v(" "),a("ol",[a("li",[_._v("收集利益相关者的需求。倾听业务人员、项目负责人等相关者的需求，进行用户访谈，收集相关的需求。")]),_._v(" "),a("li",[_._v("与相应的技术人员（如开发人员、测试人员）讨论，了解架构上的潜在限制。")]),_._v(" "),a("li",[_._v("寻找潜在的可行性技术方案。")]),_._v(" "),a("li",[_._v("整理出功能列表中的功能性需求和跨功能性需求。")]),_._v(" "),a("li",[_._v("找出会严重影响开发的风险点。")]),_._v(" "),a("li",[_._v("和技术委员会、利益相关者反复确认方案（可选）。")]),_._v(" "),a("li",[_._v("对架构设计进行概念证明。")]),_._v(" "),a("li",[_._v("细化架构的部分实施细节。")]),_._v(" "),a("li",[_._v("结合技术和业务，进行需求排期。")])]),_._v(" "),a("p",[_._v("对于不同项目来说，上述步骤都会有所不同，有的可以直接忽略一些步骤，有的则会包含更多的步骤。在项目实施的过程中，如果有部分需求无法确认，就需要延迟决定。")]),_._v(" "),a("h3",{attrs:{id:"_1-3-架构设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-架构设计原则","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.3 架构设计原则")]),_._v(" "),a("p",[_._v("不同的人在设计架构时会出现不同的风格，在细节的把握上也会出现特有的风格，这便是架构的设计原则。笔者根据自己的项目经验，总结了三个设计原则，如下。")]),_._v(" "),a("ul",[a("li",[_._v("不多也不少：不做多余的设计，也不缺少关键的部分。")]),_._v(" "),a("li",[_._v("演进式：不断地演进以使架构适应当前的环境。")]),_._v(" "),a("li",[_._v("持续性：长期的架构改进比什么都重要。")])]),_._v(" "),a("p",[_._v("它们不是真实的架构需求，而是隐藏在背后的设计思想，也是不同人的设计价值观。")]),_._v(" "),a("h3",{attrs:{id:"_1-4-前端架构发展史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-前端架构发展史","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.4 前端架构发展史")]),_._v(" "),a("p",[_._v("最初，前端是没有架构的，因为功能简单的代码没有架构可言。通过操作DOM就能完成的工作，不需要复杂的设计模式和代码管理机制，也就不需要架构来支撑起应用。前端开发的发展历史分为以下几个阶段：")]),_._v(" "),a("ul",[a("li",[_._v("古典时期。由后端渲染出前端HTML，用Table布局，用CSS进行简单的辅助。")]),_._v(" "),a("li",[_._v("动效时期。前端开始编写一些简单的JavaScript脚本来做动画效果，如轮播广告。")]),_._v(" "),a("li",[_._v("Ajax异步通信时期。2005年，Google在诸多Web应用中使用了异步通信技术如Google地图，开启了Web前端的一个新时代。")]),_._v(" "),a("li",[_._v("动态生成HTML。由后端返回前端所需要的HTML，再动态替换页面的DOM元素。早期的典型架构如jQuery Mobile，事先在前端写好模板与渲染逻辑，用户的行为触发后台并返回对应的数据，来渲染文件。")]),_._v(" "),a("li",[_._v("模板分离。由后端用API返回前端所需要的JSON数据，再由前端来计算生成这些HTML。前端的模板不再使用HTML，而是使用诸如Mustache这样的模板引擎来渲染HTML。")]),_._v(" "),a("li",[_._v("更好的构建工具。诞生了诸如Grunt和Gulp等构建工具。")]),_._v(" "),a("li",[_._v("包管理。产生了用于前端的包管理工具Bower和NPM。")]),_._v(" "),a("li",[_._v("模块管理。也出现了AMD、Common.js等不同的模块管理方案。")]),_._v(" "),a("li",[_._v("API管理，采用了诸如Swagger的API管理工具，各式的Mock Server也成为标准实践。")]),_._v(" "),a("li",[_._v("大前端，由前端来开发跨平台移动应用框架，采用诸如Ionic、React Native、Flutter等框架。")]),_._v(" "),a("li",[_._v("组件化，前端应用从此由一个个细小的组件结合而成，而不再是一个大的页面组件。")]),_._v(" "),a("li",[_._v("跨框架。在一个页面上运行，可以同时使用多个前端框架。")]),_._v(" "),a("li",[_._v("应用拆分。将一个复杂的应用拆解为多个微小的应用，类似于微服务。")]),_._v(" "),a("li",[_._v("遗留系统迁移。让旧的前端框架，可以直接嵌入现有的应用运行。")])]),_._v(" "),a("h3",{attrs:{id:"_1-5-前端架构设计：层次设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-前端架构设计：层次设计","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5 前端架构设计：层次设计")]),_._v(" "),a("p",[_._v("从笔者的角度来看，架构设计本身是分层级的，面向不同级别的人时所展示的内容也是不一样的。如我们作为一个架构师、技术人员，在面对同一级别、更高一级别的架构师、技术人员时，说的便是形而上学的东西，如微前端、前后端分离等各种概念。这些概念，对于接触过相关知识的程序员而言很容易理解。而当我们面对经验略微丰富的程序员的时候，说的可就不是：去实现微前端这样的东西，而是需要落实到怎样去做这样的一件事。")]),_._v(" "),a("p",[_._v("不同阶段构成架构的因素是不同的，基于这个思路，架构设计可以分为四个层级")]),_._v(" "),a("p",[a("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801158958715.jpg",alt:"-w1180"}})]),_._v(" "),a("p",[_._v("相应的层级解释如下：")]),_._v(" "),a("ul",[a("li",[_._v("系统级，即应用在整个系统内的关系，如与后台服务如何通信，与第三方系统如何集成。")]),_._v(" "),a("li",[_._v("应用级，即应用外部的整体架构，如多个应用之间如何共享组件、如何通信等。")]),_._v(" "),a("li",[_._v("模块级，即应用内部的模块架构，如代码的模块化、数据和状态的管理等。")]),_._v(" "),a("li",[_._v("代码级，即从基础设施来保障架构实施。")])]),_._v(" "),a("p",[_._v("在设计的时候，既要用自上而下的方式来设计架构，又要用自下而上的方式来完善架构。从演进式设计的角度来看，我们需要在前期设计的时候，对所有系统级架构及部分应用级架构进行技术决策，而其余部分的架构则可以在实施的过程中考虑。")]),_._v(" "),a("h4",{attrs:{id:"_1-5-1-系统内架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-系统内架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5.1 系统内架构")]),_._v(" "),a("p",[_._v("在设计前端架构的时候，首先考虑的是应用在整个系统中的位置——它与系统中的其他子系统是怎样的。这种关系包含了架构和业务上的关系，以及它们之间的协作机制。对于前端应用来说，这一部分的子系统包含了如下两方面内容：")]),_._v(" "),a("ul",[a("li",[_._v("其他前端应用。关注如何与这些应用进行交互、通信等。")]),_._v(" "),a("li",[_._v("对接的后台服务。关注如何与后台服务进行通信，诸如权限、授权、API管理等。")])]),_._v(" "),a("p",[_._v("如果是系统间的数据通信（如与后台服务之间的交互），那么只需要规定数据通信、数据传递的机制即可。这一类的通信机制，不仅包含了前后端分离架构的API设计，还包含了各类的数据传递，如OAuth跳转的Token验证等。此外，对于传统的多页面应用来说，也需要关注其中的数据传递，如将Cookie作为用户凭据等。")]),_._v(" "),a("p",[_._v("因此，对于前端与后端的关系，我们所要考虑的主要因素是前后端分离架构的设计。")]),_._v(" "),a("p",[_._v("前后端分离架构其实是一个笼统的概念，它是指前后端分离如何实施的技术决策。它包含了一系列的决策、用户鉴权、API接口管理与设计、API（契约）文档管理、Mock Server使用、BFF（服务于前端的后端）、是否需要服务端渲染等。与此同时，当我们开发应用的时候，所涉及的并不只是我们所在团队的工作，往往还需要与其他团队，或者团队内的其他成员的沟通，才能与后端一起设计出整个前后端分离的方案。")]),_._v(" "),a("p",[_._v("当在一个系统内时，微前端是一个应用间的架构方案，当在多个应用间时，微前端则是一种系统间的架构方案。")]),_._v(" "),a("p",[_._v("微前端是将多个前端应用以某种形式结合到一起，当系统中存在多个前端应用（或者单个前端应用的模块较大）时，就需要考虑使用微前端的方式来拆分。此外，还需要做一系列的技术决策来支持应用的整合。")]),_._v(" "),a("p",[_._v("然后，我们还需要考虑前端的客户端展现形式。在大前端的背景下，它可能是PC Web应用、移动Web应用、混合移动应用（结合Cordova构架）、混合桌面应用（结合Electron框架）、原生移动应用（结合React Native）等，具体选择哪一种技术，取决于我们先前调查的利益相关者的需求。当我们做完上述三个核心的架构决策之后，就需要考虑应用的部署架构了。有的客户端形式可能需要服务端渲染，会在某种程度上影响到前端应用的部署，但是总的影响并不大，往往只需要通过反向代理的配置就可以完成部署的配置。如果与后台服务不在一个域，则需要考虑支持跨域请求，或者让后台做一层代码。")]),_._v(" "),a("p",[_._v("有了这些基本的架构设定，便可以继续设计下一层级的应用架构。")]),_._v(" "),a("h4",{attrs:{id:"_1-5-2-应用级架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-应用级架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5.2 应用级架构")]),_._v(" "),a("p",[_._v("应用级架构指的是，单个应用与外部应用的关系，如微服务架构下的多个应用的协作。它可以是一个团队下的多个前端应用，也可以是一个组织内的前端应用。其在组织中所处的位置，也进一步决定了我们所需要设计的架构方案。")]),_._v(" "),a("p",[_._v("若是从相关的定义来看，它与系统级应用存在一定的交集。但是，笔者将其视为系统级架构的进一步细化。比如，在系统架构的层级里，我们定义了微前端架构，而具体的实施细则则会放在各个应用中实现。至于应用间的数据如何交换，不同的应用有不同的实现方式，通常是通过在相应的层级里定义相应的接口来实现。")]),_._v(" "),a("p",[_._v("由于各应用之间需要通过复用代码、共享组件库、统一设计等减少工作量，因此，我们要考虑以下几方面内容。")]),_._v(" "),a("blockquote",[a("p",[_._v("共享组件库")]),_._v(" "),a("p",[_._v("统一设计")])]),_._v(" "),a("p",[_._v("脚手架。作为一个基础的模块应用，脚手架用于快速生成、搭建前端应用。它除了包含一个前端项目所需要的要素，还包含着与组织内部相关的规范和模式，如部署模板、构建系统等。团队内的多个应用之间往往会使用同一套构建系统，该构建系统会包含在脚手架中。除了包含一系列的构建脚本，它还可以包含编写好的统一的CLI工具。比如在笔者曾经历的混合应用开发的项目里，就曾经通过编写CLI工具支持多个应用的开发。")]),_._v(" "),a("blockquote",[a("p",[_._v("脚手架 CLI")]),_._v(" "),a("p",[_._v("部署模板")]),_._v(" "),a("p",[_._v("构建系统")])]),_._v(" "),a("p",[_._v("模式库。它是一系列可复用代码的合集，如前端组件、通用的工具函数等。其作用是在多个应用之间共享代码，降低修改成本。在设计架构的时候，如果考虑内建相应的UI组件库，就需要考虑结合装饰器模式，将模式库作为一层代理来封装外部的API，以降低后期的修改成本。模式库还包含了用于多个前端应用通信的数据通信库。")]),_._v(" "),a("blockquote",[a("p",[_._v("前端组件")]),_._v(" "),a("p",[_._v("通用的工具函数")])]),_._v(" "),a("p",[_._v("设计系统。它相当于更高级别的UI组件库，在这个层级里，我们关注抽象通用的UI模式，用于在多个系统之间共享设计。与模式库/组件库不同，设计系统偏向于设计人员的模式，而非开发人员的视角。")]),_._v(" "),a("p",[_._v("在应用级架构中，我们将决定选择哪种前端框架，并进行相关的技术选型。")]),_._v(" "),a("h4",{attrs:{id:"_1-5-3-模块级架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-模块级架构","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5.3 模块级架构")]),_._v(" "),a("p",[_._v("模块级架构是深入单个应用内部、更细致地设计应用内部的架构，它所涉及的内容是我们在日常开发中经常接触的。我们所要做的是，制定一些规范或者更细致的架构设计。这部分内容会在我们开始业务编码之前进行设计。在敏捷软件开发中，它被称为迭代0/Sprint 0/Iteration 0，其相关的内容有以下两个方面：")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("模块化。它包含了CSS、JavaScript、HTML/模板的模块化。对于JavaScript或者模板而言，其模块化的设计受框架的影响比较深。对于CSS来说，我们也需要设计一个合理的方式来进行管理，既需要考虑全局样式以用于样式复用、局部样式以用于隔离变化、通用变量以方便修改，又需要考虑相应的工具来辅助设计。此外，还需要定义相应的CSS、JavaScript、模块的代码组织方式。")])]),_._v(" "),a("li",[a("p",[_._v("组件化。它主要考虑的是，在应用内如何对组件进行封闭，以及相应的原则和粒度。")]),_._v(" "),a("blockquote",[a("p",[_._v("SOLID")])])])]),_._v(" "),a("p",[_._v("此外，对于不同的框架，还涉及一些框架特定的模式与架构设计，它们会在一定程度上影响单个应用的架构。对于不同的框架来说，所涉及的范围有所不同。如在Angular框架中，不需要关心相关的模式，只需要掌握框架定义的规范即可，如使用Service来保存应用的状态、使用Pipe来处理数据等。而在React框架中，则需要设计状态和数据流的管理方式，即需要诸如Flux或者Redux这样的状态管理方案。")]),_._v(" "),a("blockquote",[a("p",[_._v("Pipe?")]),_._v(" "),a("p",[_._v("Service?")]),_._v(" "),a("p",[_._v("Flux?")]),_._v(" "),a("p",[_._v("Redux?")])]),_._v(" "),a("h4",{attrs:{id:"_1-5-4-代码级：规范与原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-代码级：规范与原则","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5.4 代码级：规范与原则")]),_._v(" "),a("p",[_._v("当我们真正编码的时候，考虑的架构因素是更低层级的内容，这部分架构设计被称为代码级的架构设计，它关注于实践过程中的相关规范和原则。这部分内容相当多并且烦琐，包含但不限于下述内容：")]),_._v(" "),a("p",[_._v("开发流程。它包含了开发一个功能所需要的完整流程——从源码管理方式、代码合并方式、代码提交信息规范、代码规范自动化，到测试编写等一系列的过程。编写开发流程的目的是，保证编写、创建出来的代码能够符合项目的要求。")]),_._v(" "),a("blockquote",[a("p",[_._v("源码管理方式")]),_._v(" "),a("p",[_._v("代码合并方式")]),_._v(" "),a("p",[_._v("代码提交信息规范")]),_._v(" "),a("p",[_._v("代码规范自动化")]),_._v(" "),a("p",[_._v("测试编写")])]),_._v(" "),a("p",[_._v("代码质量及改善。在实施过程中不仅要注重代码整洁，还要注重TDD（测试驱动开发）等相关的实践，并且遵守SOLID原则，以保证代码的质量。此外，还需要制定代码的测试策略，测试的目的并非减少bug，而是用测试来保证现有的功能是正确的。")]),_._v(" "),a("blockquote",[a("p",[_._v("TDD")]),_._v(" "),a("p",[_._v("SOLID")])]),_._v(" "),a("p",[_._v("规范而非默契。在整个架构中，我们会更关注规范化。小的团队可以依赖于默契，大的团队则需要规范。它需要我们关注几个方面：代码风格的统一，如统一化编辑器、IDE等的配置、使用几个空格；代码的命名；如何保持一致性等。")]),_._v(" "),a("blockquote",[a("p",[_._v("代码风格")]),_._v(" "),a("p",[_._v("代码命名")])]),_._v(" "),a("p",[_._v("此外，在日常的开发中，还需要注重代码的可维护性——简单的代码更容易被读懂和维护。笔者在维护一个Scala项目的过程中，就深有体会——越是写得抽象的代码，越难以维护。诸如函数式编程是一个好东西，但是好的东西也容易被滥用，导致人们不喜欢这个东西。")]),_._v(" "),a("blockquote",[a("p",[_._v("代码维护")])])])},[],!1,null,null,null);v.default=r.exports}}]);